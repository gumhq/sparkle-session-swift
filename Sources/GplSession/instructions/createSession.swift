import Beet
/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Solana

/**
 * @category Instructions
 * @category CreateSession
 * @category generated
 */
public struct CreateSessionInstructionArgs {
    let instructionDiscriminator: [UInt8] /* size: 8 */
    let topUp: COption<Bool>
    let validUntil: COption<Int64>

    public init(
        instructionDiscriminator: [UInt8] /* size: 8 */ = createSessionInstructionDiscriminator,
        topUp: COption<Bool>,
        validUntil: COption<Int64>
    ) {
        self.instructionDiscriminator = instructionDiscriminator
        self.topUp = topUp
        self.validUntil = validUntil
    }
}

/**
 * @category Instructions
 * @category CreateSession
 * @category generated
 */
public let createSessionStruct = FixableBeetArgsStruct<CreateSessionInstructionArgs>(
    fields: [
        ("instructionDiscriminator", Beet.fixedBeet(.init(value: .collection(UniformFixedSizeArray<UInt8>(element: .init(value: .scalar(u8())), len: 8))))),
        ("topUp", Beet.fixableBeat(coption(inner: Beet.fixedBeet(.init(value: .scalar(bool())))))),
        ("validUntil", Beet.fixableBeat(coption(inner: Beet.fixedBeet(.init(value: .scalar(i64())))))),
    ],
    description: "CreateSessionInstructionArgs"
)
/**
 * Accounts required by the _createSession_ instruction
 *
 * @property [_writable_] sessionToken
 * @property [**signer**] sessionSigner
 * @property [_writable_, **signer**] authority
 * @property [] targetProgram
 * @category Instructions
 * @category CreateSession
 * @category generated
 */
public struct CreateSessionInstructionAccounts {
    let sessionToken: PublicKey
    let sessionSigner: PublicKey
    let authority: PublicKey
    let targetProgram: PublicKey
    let systemProgram: PublicKey?

    public init(
        sessionToken: PublicKey,
        sessionSigner: PublicKey,
        authority: PublicKey,
        targetProgram: PublicKey,
        systemProgram: PublicKey? = nil
    ) {
        self.sessionToken = sessionToken
        self.sessionSigner = sessionSigner
        self.authority = authority
        self.targetProgram = targetProgram
        self.systemProgram = systemProgram
    }
}

public let createSessionInstructionDiscriminator = [242, 193, 143, 179, 150, 25, 122, 227] as [UInt8]

/**
 * Creates a _CreateSession_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
   * @param args to provide as instruction data to the program
  *
 * @category Instructions
 * @category CreateSession
 * @category generated
 */
public func createCreateSessionInstruction(accounts: CreateSessionInstructionAccounts,
                                           args: CreateSessionInstructionArgs, programId: PublicKey = PublicKey(string: "3ao63wcSRNa76bncC2M3KupNtXBFiDyNbgK52VG7dLaE")!) -> TransactionInstruction
{
    let data = createSessionStruct.serialize(
        instance: ["instructionDiscriminator": createSessionInstructionDiscriminator,
                   "topUp": args.topUp,
                   "validUntil": args.validUntil])

    let keys: [AccountMeta] = [
        AccountMeta(
            publicKey: accounts.sessionToken,
            isSigner: false,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.sessionSigner,
            isSigner: true,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.authority,
            isSigner: true,
            isWritable: true
        ),
        AccountMeta(
            publicKey: accounts.targetProgram,
            isSigner: false,
            isWritable: false
        ),
        AccountMeta(
            publicKey: accounts.systemProgram ?? PublicKey.systemProgramId,
            isSigner: false,
            isWritable: false
        ),
    ]

    let ix = TransactionInstruction(
        keys: keys,
        programId: programId,
        data: data.0.bytes
    )
    return ix
}
